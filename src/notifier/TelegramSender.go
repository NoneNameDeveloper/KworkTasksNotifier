package notifier

import (
	"KworkTasksNotifier/src/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"log"
	"os"
	"strconv"
)

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
func SendMessage(data models.KworkResponseModel) (err error) {
	bot, err := tgbotapi.NewBotAPI(GetEnvVariable("BOT_TOKEN"))
	bot.Debug = false

	if err != nil {
		return err
	}

	channelId, _ := strconv.ParseInt(GetEnvVariable("CHANNEL_ID"), 10, 64)
	msg := tgbotapi.NewMessage(channelId, BuildMessageBody(data))
	msg.ParseMode = "HTML"

	var markup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–ü–µ—Ä–µ–π—Ç–∏", "https://kwork.ru"+data.URL),
		),
	)
	msg.ReplyMarkup = markup

	_, err = bot.Send(msg)

	if err != nil {
		return err
	}

	return nil
}

// BuildMessageBody —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤
// —Ç–µ–ª–µ–≥—Ä–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
func BuildMessageBody(model models.KworkResponseModel) (msg string) {
	msg = "<b>üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n" +
		"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ: " + model.Name + "\n</b>" +
		"‚úçÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ: </b><i>" + model.Description + "</i>\n" +
		"üíµ <b>–ë—é–¥–∂–µ—Ç: " + model.PriceLimit + " ‚ÇΩ</b>\n" +
		"üí∞ <b>–î–æ–ø—É—Å—Ç–∏–º—ã–π –±—é–¥–∂–µ—Ç: " + strconv.Itoa(model.PossiblePriceLimit) + " ‚ÇΩ</b>"

	if len(model.Files) != 0 {
		msg += "\nüìÇ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
		for _, payload := range model.Files {
			msg += "\n<a href='" + payload.Url + "'>" + payload.Name + "</a>"
		}
	}
	return msg
}

// GetEnvVariable –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞–∫–µ—Ç godot –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
// –∏–∑ .env —Ñ–∞–π–ª–∞ (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã)
func GetEnvVariable(key string) string {
	err := godotenv.Load("config.env")

	if err != nil {
		log.Fatalf("Error loading .env file")
	}

	return os.Getenv(key)
}
